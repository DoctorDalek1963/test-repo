# We test and compile on macOS to make sure it works, but we don't publish it
# This is because Apple code signing means the binary won't run when the user downloads it
# They'll need to compile it from source but we need to make sure that works on macOS

name: Compile and release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'

      - name: Check
        run: |
          mypy src/ tests/
          flake8 src/ tests/
          pycodestyle src/ tests/
          pydocstyle src/ tests/

  test:
    needs: check
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]
        python-version: ['3.10', '3.9', '3.8']

    env:
      DISPLAY: ':99.0'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'

      - name: Install Xvfb
        if: runner.os == 'Linux'
        run: |
          sudo apt install libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
          /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1920x1200x24 -ac +extension GLX

      - name: Run pytest
        run: pytest

      - name: Run doctests
        run: pytest --doctest-modules src/

  compile:
    needs: test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[compile]'

      - name: Install UPX
        if: runner.os == 'Windows'  # PyInstaller currently only uses UPX on Windows
        run: choco install upx

      - name: Compile
        run: python compile.py -f
        shell: bash

      - name: Upload artifact
        if: runner.os != 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }}-binary
          path: lintrans*

  compile-windows-installer:
    needs: test
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Compile lintrans
        run: |
          pip install --upgrade pip
          pip install -e '.[compile]'
          choco install upx
          python compile.py
        shell: bash

      - name: Setup NSIS script
        run: |
          mv lintrans.exe installers/
          cp src/lintrans/gui/assets/icon.ico installers/lintrans.ico
        shell: bash

      - name: Compile NSIS script
        uses: joncloud/makensis-action@v3.7
        with:
          script-file: installers/Windows.nsi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: install-lintrans-Windows.exe
          path: installers/install-lintrans-Windows.exe

  publish:
    needs: [compile, compile-windows-installer]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: Windows-binary
          path: dist/

      - name: Download Windows installer
        uses: actions/download-artifact@v3
        with:
          name: install-lintrans-Windows.exe
          path: dist/

      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: Linux-binary
          path: dist/

      - name: Check for dev tag
        id: checkprerelease
        # We used to just check for -alpha on the end but now we check for any tag on the end
        # This allows for -beta, -dev, -rc1, etc. If it ends in -anything, then it's a pre-release
        run: |
          isprerelease=$(if [ -n "$(echo $GITHUB_REF | grep -Po -- '(v?\d+\.\d+\.\d+)-[^ ]+')" ]; then echo 1; else echo 0; fi)
          echo "::set-output name=isprerelease::$isprerelease"

      - name: Generate release notes
        run: python generate_release_notes.py $GITHUB_REF_NAME

      # This is practically the same step twice just to allow for pre-releases
      - name: Upload binaries (normal release)
        if: steps.checkprerelease.outputs.isprerelease == 0
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          prerelease: false
          draft: true
          body_path: release_notes.md
          files: |
            dist/lintrans*
            dist/install-lintrans-Windows.exe
            installers/install-lintrans-Linux.sh

      - name: Upload binaries (pre-release)
        if: steps.checkprerelease.outputs.isprerelease == 1
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          prerelease: true
          draft: true
          body_path: release_notes.md
          files: |
            dist/lintrans*
            dist/install-lintrans-Windows.exe
            installers/install-lintrans-Linux.sh
